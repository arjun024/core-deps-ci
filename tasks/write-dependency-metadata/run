#!/usr/bin/env bash

set -euo pipefail

initialize_metadata_file() {
  local metadata_file=$1

  if [[ -z "$(cat "${metadata_file}")" ]]; then
    echo '[]' > "${metadata_file}"
  fi
}

write_metadata_file() {
  local source_file=$1
  local config_file=$2
  local dependency=$3
  local sha=$4
  local metadata_file=$5

  name="$(jq -r .name "${source_file}")"
  version="$(jq -r .version "${source_file}")"

  version_metadata="$(cat << EOF
{
  "name": "${name}",
  "version": "${version}",
  "sha256": "${sha}",
  "uri": "https://pivotal-buildpacks.s3.amazonaws.com/deps/${name}/${dependency}",
  "stacks": $(yj -yj < "${config_file}" | jq --arg name "${name}" -r '.dependencies[] | select(.name == $name) | .stacks'),
  "source": "$(jq -r .source_uri "${source_file}")",
  "source_sha256": "$(jq -r .source_sha "${source_file}")",
  "deprecation_date": "$(jq -r '.deprecation_date // ""' "${source_file}")"
}
EOF
  )"
  updated_metadata="$(jq --argjson metadata "${version_metadata}" --arg version "${version}" -r 'del(.[] | select(.version == $version)) | [$metadata] + .' "${metadata_file}")"

  echo "${updated_metadata}" > "${metadata_file}"
}

check_sha() {
  local expected_sha=$1
  local actual_sha=$2

  if [[ "${actual_sha:0:8}" != "${expected_sha}" ]]; then
    echo "ERROR: The actual sha did not match the expected sha"
    exit 1
  fi
}

main() {
  local dependency expected_sha actual_sha metadata_file

  dependency="$(ls dependency/ -I url -I version)"
  expected_sha="$(echo "${dependency}" | cut -d '_' -f6 | cut -d '.' -f1)"
  actual_sha="$(sha256sum "dependency/${dependency}" | cut -d ' ' -f1)"

  check_sha "${expected_sha}" "${actual_sha}"

  metadata_file="$(ls metadata/*.json)"

  initialize_metadata_file "${metadata_file}"

  write_metadata_file "source/data.json" "core-deps-ci/pipelines/dep-builder/dep-builder-config.yml" "${dependency}" "${actual_sha}" "${metadata_file}"
}

main "$@"
