#!/usr/bin/env bash

set -euo pipefail

build_go() {
  install_package curl

  local bootstrap_go_dir
  bootstrap_go_dir="$(mktemp -d)"

  local go_1_4_3_url="https://storage.googleapis.com/golang/go1.4.3.linux-amd64.tar.gz"
  local go_1_4_3_sha="ce3140662f45356eb78bc16a88fc7cfb29fb00e18d7c632608245b789b2086d2"

  curl -sL -o "${bootstrap_go_dir}/go.tgz" "${go_1_4_3_url}"

  local actual_sha
  actual_sha="$(sha256sum "${bootstrap_go_dir}/go.tgz" | awk '{ print $1 }')"
  if [[ "${actual_sha}" != "${go_1_4_3_sha}" ]]; then
    echo "Incorrect sha for go 1.4.3 tarball: expected '${go_1_4_3_sha}' but got '${actual_sha}'"
    exit 1
  fi

  tar -C "${bootstrap_go_dir}" -xf "${bootstrap_go_dir}/go.tgz"
  rm "${bootstrap_go_dir}/go.tgz"

  export GOROOT_BOOTSTRAP="${bootstrap_go_dir}/go"

  local build_dir
  build_dir="$(mktemp -d)"
  tar -C "${build_dir}" -xf source/go*.src.tar.gz

  pushd "${build_dir}/go/src" >/dev/null
    ./make.bash
  popd >/dev/null

  tar -C "${build_dir}/go" -czf built-dependency/go.tgz .

  rm -rf "${build_dir}" "${bootstrap_go_dir}"

  rename_built_dependency "built-dependency/go.tgz" "go" "linux" "x64"
}

build_node() {
  install_package python

  local build_dir
  build_dir="$(mktemp -d)"
  tar -C "${build_dir}" -xf source/node*.tar.gz

  pushd "${build_dir}"/node-* >/dev/null
    python configure --prefix=/ --openssl-use-def-ca-store
    make install DESTDIR="$PWD/compiled-node" PORTABLE=1
    cp LICENSE compiled-node
  popd >/dev/null

  tar -C "${build_dir}"/node-*/compiled-node -czf built-dependency/node.tgz .

  rm -rf "${build_dir}"

  rename_built_dependency "built-dependency/node.tgz" "node" "linux" "x64"
}

install_package() {
  local package=$1

  if type "${package}" >/dev/null; then
    return
  fi

  apt-get -qqy update
  apt-get -qqy install "${package}"
  apt-get -qqy clean
  rm -rf /var/lib/apt/lists/*
}

rename_built_dependency() {
  local path=$1
  local name=$2
  local os=$3
  local arch=$4

  local version shortened_sha extension
  version="$(jq -r .version source/data.json)"
  shortened_sha="$(sha256sum built-dependency/node.tgz | cut -c1-8)"
  extension="${path#*.}"

  mv "${path}" "built-dependency/${name}_${version}_${os}_${arch}_${STACK}_${shortened_sha}.${extension}"
}

write_metadata() {
  local filename dependency_name version url sha source_uri source_sha

  filename="$(basename built-dependency/*)"
  dependency_name="$(jq -r .name source/data.json)"
  version="$(jq -r .version source/data.json)"
  url="https://buildpacks.cloudfoundry.org/dependencies/${dependency_name}/${filename}"
  sha="$(sha256sum built-dependency/* | awk '{ print $1 }')"
  source_uri="$(jq -r .source_uri source/data.json)"
  source_sha="$(jq -r .source_sha source/data.json)"

  cat >metadata/metadata.json <<-EOF
{
  "version": "${version}",
  "url": "${url}",
  "sha256": "${sha}",
  "source": {
    "url": "${source_uri}",
    "sha256": "${source_sha}"
  }
}
EOF
}

main() {
  if [[ -z "${STACK}" ]]; then
    echo "Must set \$STACK"
    exit 1
  fi

  local dependency_name
  dependency_name="$(jq -r .name source/data.json)"

  case "${dependency_name}" in
    go)
      build_go
      ;;
    node)
      build_node
      ;;
    *)
      echo "Unknown dependency '${dependency_name}'"
      exit 1
      ;;
  esac

  write_metadata
}

main "$@"
