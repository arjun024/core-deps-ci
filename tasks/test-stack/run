#!/bin/bash

set -euo pipefail

start_docker() {
  #shellcheck source=../../scripts/start-docker
  source "./bre-ci/scripts/start-docker"
  util::docker::start
  trap util::docker::stop EXIT
}

create_builder() {
  build_image="gcr.io/paketo-buildpacks/build:${TAG}"
  run_image="gcr.io/paketo-buildpacks/run:${TAG}"

  if [[ "${IMAGE_TYPE}" == "build" ]]; then
    build_image="${IMAGE}"
  else
    run_image="${IMAGE}"
  fi

  docker login -u _json_key --password-stdin https://gcr.io/cf-buildpacks-releng < <(echo "${GCP_SERVICE_ACCOUNT_KEY}")

  docker pull "${IMAGE}"

  cat > test-builder.toml << EOF
description = "Test base image (bionic build image, distroless run image) with buildpacks for Golang"

[[buildpacks]]
uri = "buildpacks/go.tgz"

[[buildpacks]]
uri = "buildpacks/go-compiler.tgz"

[[buildpacks]]
uri = "buildpacks/go-mod.tgz"

[[buildpacks]]
uri = "buildpacks/dep.tgz"

[[order]]
group = [
  { id = "org.cloudfoundry.go" },
]

[stack]
id = "${STACK_ID}"
build-image = "${build_image}"
run-image = "${run_image}"
EOF

  pack create-builder test-builder -b test-builder.toml
}

build_and_run_test_app() {
  pack build test-app --builder test-builder --path fixtures/app/

  docker run test-app
}

main() {
  start_docker

  pushd bre-ci/tasks/test-stack > /dev/null
    create_builder
    build_and_run_test_app
  popd > /dev/null
}

main "$@"
