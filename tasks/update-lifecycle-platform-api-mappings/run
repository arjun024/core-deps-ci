#!/bin/bash

set -euo pipefail

lifecycle_ref="$(cat cnb-lifecycle-release/tag)"
platform_api_version="$(cat platform-api-version/version)"
latest_version=
n_1_version=
n_2_version=

get_current_and_latest_platform_api_version() {
  latest_version="$(jq -r .latest.platform_api_version lifecycle-metadata-file/*.json)"
  n_1_version="$(jq -r '."n-1".platform_api_version' lifecycle-metadata-file/*.json)"
  n_2_version="$(jq -r '."n-2".platform_api_version' lifecycle-metadata-file/*.json)"
}

check_version() {
  platform_api_major_version="${platform_api_version%.*}"
  latest_major_version="${latest_version%.*}"
  n_1_major_version="${n_1_version%.*}"
  n_2_major_version="${n_2_version%.*}"

  if [[ "${platform_api_major_version}" == 0 ]]; then
    if [[ "${platform_api_version}" > "${latest_version}" ]]; then
      rewrite_metadata_file
    else
      case "${platform_api_version}" in
        "${latest_version}")
          update_version_and_ref "latest"
          ;;
        "${n_1_version}")
          update_version_and_ref "n-1"
          ;;
        "${n_2_version}")
          update_version_and_ref "n-2"
          ;;
        *)
          echo "The version ${platform_api_version} is an old version and is not currently supported."
          ;;
      esac
    fi
  else
    if [[ "${platform_api_major_version}" > "${latest_major_version}" ]]; then
      rewrite_metadata_file
    else
      case "${platform_api_major_version}" in
        "${latest_major_version}")
          update_version_and_ref "latest"
          ;;
        "${n_1_major_version}")
          update_version_and_ref "n-1"
          ;;
        "${n_2_major_version}")
          update_version_and_ref "n-2"
          ;;
        *)
          echo "The version ${platform_api_version} is an old version and is not currently supported."
          ;;
      esac
    fi
  fi
}

update_version_and_ref() {
  version="$1"
  jq --arg version "${version}" --arg lifecycle_ref "${lifecycle_ref}" -r '. | .[($version)].lifecycle_ref = $lifecycle_ref' lifecycle-metadata-file/*.json > updated_ref_metadata.json
  jq --arg version "${version}" --arg platform_api_version "${platform_api_version}" -r '. | .[($version)].platform_api_version = $platform_api_version' updated_ref_metadata.json > updated_ref_and_version_metadata.json
  mv updated_ref_and_version_metadata.json lifecycle-metadata-file/*.json
}

rewrite_metadata_file() {
  cat > updated_metadata.json << EOF
{
  "latest": {
    "platform_api_version": "${platform_api_version}",
    "lifecycle_ref": "${lifecycle_ref}"
  },
  "n-1": {
    "platform_api_version": "$(jq -r .latest.platform_api_version lifecycle-metadata-file/*.json)",
    "lifecycle_ref": "$(jq -r .latest.lifecycle_ref lifecycle-metadata-file/*.json)"
  },
  "n-2": {
    "platform_api_version": "$(jq -r '."n-1".platform_api_version' lifecycle-metadata-file/*.json)",
    "lifecycle_ref": "$(jq -r '."n-1".lifecycle_ref' lifecycle-metadata-file/*.json)"
  }
}
EOF
  mv updated_metadata.json lifecycle-metadata-file/*.json
}

main() {
  get_current_and_latest_platform_api_version
  check_version
}

main "$@"
