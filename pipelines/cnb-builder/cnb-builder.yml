#@ load("@ytt:data", "data")
#@yaml/text-templated-strings

#@ def generate_tags(builder, version):
#@   if version != "latest":
#@     return ""
#@   end
#@   tags = builder.stack
#@   for stack in data.values.stacks:
#@     if stack.name == builder.stack:
#@       tags += " " + stack.tag
#@     end
#@   end
#@   if builder.latest:
#@     tags += " latest"
#@   end
#@   return tags
#@ end

#@ def get_params(builder):
#@   params_dict = {}
#@   for param in builder.builder_image_params:
#@     params_dict.update({param.name: param.value})
#@   end
#@   return params_dict
#@ end

#@ def is_enterprise_builder(builder):
#@   for param in builder.builder_image_params:
#@     if param.name == "ENTERPRISE":
#@       if param.value == True:
#@         return True
#@       end
#@     end
#@   end
#@   return False
#@ end

#@ def published_cnbs_for_builder(builder):
#@   published_cnbs = []
#@   for published_cnb in data.values.published_cnbs:
#@     include_cnb = True
#@     if hasattr(published_cnb, "skip_stack"):
#@       for stack in published_cnb.skip_stack:
#@         if stack == builder.stack:
#@           include_cnb = False
#@         end
#@       end
#@     end
#@     if include_cnb:
#@       published_cnbs.append(published_cnb)
#@     end
#@   end
#@   return published_cnbs
#@ end

#@ def get_published_cnb_source_config(cnb):
#@   config = {"repository": cnb.repo}
#@   if hasattr(cnb, "private_key"):
#@     config.update({"username": "_json_key", "password": cnb.private_key})
#@   end
#@   return config
#@ end

#@ def get_builder_image_source_config(builder, version, repository):
#@   tag = builder.name + "-platform-api-" + version
#@   config = {"tag": tag, "repository": repository}
#@   for registry in data.values.registry_credentials:
#@     if repository.startswith(registry.name):
#@       config.update({"username": registry.username, "password": registry.password})
#@     end
#@   end
#@   return config
#@ end

---
resource_types:
  - name: cron
    type: docker-image
    source:
      repository: cfbuildpacks/cron-resource

resources:
- name: buildpacks-ci
  type: git
  source:
    uri: https://github.com/cloudfoundry/buildpacks-ci
    branch: master

- name: core-deps-ci
  type: git
  source:
    uri: git@github.com:pivotal/core-deps-ci.git
    private_key: ((core-deps-ci-deploy-key.private_key))

- name: cnb-builder
  type: git
  source:
    uri: #@ data.values.cnb_builder_uri
    private_key: #@ data.values.cnb_builder_private_key

#@ for published_cnb in data.values.published_cnbs:
- name: #@ published_cnb.name
  type: registry-image
  source: #@ get_published_cnb_source_config(published_cnb)
#@ end

- name: packager
  type: git
  source:
    uri: https://github.com/cloudfoundry/libcfbuildpack
    branch: master

- name: pack-release
  type: github-release
  source:
    user: buildpacks
    repository: pack
    access_token: ((buildpacks-github-token))
    globs: ['*-linux.tgz']

- name: cnb-lifecycle-release
  type: github-release
  source:
    repository: lifecycle
    user: buildpacks
    access_token: ((buildpacks-github-token))

#@ for version in data.values.supported_lifecycle_versions:
- name: #@ "cnb-lifecycle-release-" + version
  type: github-release
  source:
    repository: lifecycle
    user: buildpacks
    access_token: ((buildpacks-github-token))
#@ end

- name: lifecycle-metadata-file
  type: s3
  source:
    bucket: lifecycle-metadata
    access_key_id: ((lifecycle-metadata-s3-access-key))
    secret_access_key: ((lifecycle-metadata-s3-secret-key))
    versioned_file: lifecycle-metadata.json

#! Versions
#@ for builder in data.values.builders:
- name: #@ builder.version_key + "-version"
  type: semver
  source:
    initial_version: 0.0.1
    bucket: cnb-versions
    key: #@ "builder/" + builder.version_key
    access_key_id: ((pivotal-offline-buildpacks-s3-access-key))
    secret_access_key: ((pivotal-offline-buildpacks-s3-secret-key))

#! Docker Images
  #@ for version in data.values.supported_lifecycle_versions:
    #@ for repository in builder.repositories:
- name: #@ "{}-platform-api-{}-builder-image-{}".format(builder.name, version, repository)
  type: registry-image
  source: #@ get_builder_image_source_config(builder, version, repository)
    #@ end

- name: #@ builder.name + "-platform-api-" + version + "-rc-image"
  type: registry-image
  source: #@ get_builder_image_source_config(builder, version, builder.rcs_repository)
  #@ end
#@ end

#@ for stack in data.values.stacks:
  #@ for image in data.values.images:
- name: #@ "{}-{}-cnb-image".format(stack.name, image)
  type: registry-image
  source:
    repository: #@ "paketobuildpacks/" + image
    #@ if stack.name != "cflinuxfs3":
    tag: #@ stack.tag + "-cnb"
    #@ else:
    tag: #@ "full-cnb-cf"
    #@ end
    username: ((paketo-docker-user.username))
    password: ((paketo-docker-user.password))
  #@ end
#@ end

- name: ci-image
  type: registry-image
  source:
    repository: cfbuildpacks/ci
    username: ((buildpacks-docker-user.username))
    password: ((buildpacks-docker-user.password))

jobs:
- name: pin-cnb-lifecycle-releases
  public: true
  plan:
  - in_parallel:
    - get: core-deps-ci
    - get: lifecycle-metadata-file
    - get: lifecycle
      resource: cnb-lifecycle-release
      trigger: true
#@ for version in data.values.supported_lifecycle_versions:
    - get: #@ "cnb-lifecycle-release-" + version
#@ end
  - task: get-platform-api-version
    file: core-deps-ci/tasks/get-platform-api-version/task.yml
  - task: update-lifecycle-metadata
    file: core-deps-ci/tasks/update-lifecycle-platform-api-mappings/task.yml
  - task: pin-lifecycle-versions
    file: core-deps-ci/tasks/pin-lifecycle-versions/task.yml
    params:
      CONCOURSE_URL: #@ data.values.concourse_url
      CONCOURSE_USERNAME: ((concourse_user.username))
      CONCOURSE_PASSWORD: ((concourse_user.password))
      CONCOURSE_TEAM: core-deps
      PIPELINE_NAME: #@ data.values.pipeline_name
  - put: lifecycle-metadata-file
    params:
      file: lifecycle-metadata-file/lifecycle-metadata.json

#@ for version in data.values.supported_lifecycle_versions:
  #@ for builder in data.values.builders:
- name: #@ "create-{}-builder-rc-platform-api-{}".format(builder.name, version)
  public: true
  plan:
    - in_parallel:
      - get: core-deps-ci
      - get: buildpacks-ci
      - get: ci-image
      - get: packager
      - get: pack
        resource: pack-release
        trigger: true
      - get: cnb-lifecycle-release
        passed: [ pin-cnb-lifecycle-releases ]
      - get: lifecycle
        resource: #@ "cnb-lifecycle-release-" + version
        trigger: true
      - get: #@ builder.stack + "-build-cnb-image"
        trigger: true
      - get: #@ builder.stack + "-run-cnb-image"
        trigger: true
    #@ for published_cnbs in published_cnbs_for_builder(builder):
      - get: #@ published_cnbs.name + "-cnb"
        params:
          format: oci
        resource: #@ published_cnbs.name
        trigger: true
    #@ end
      - get: cnb-builder
      - get: version
        resource: #@ builder.version_key + "-version"
        params:
          pre: rc
    - task: get-published-cnb
      image: ci-image
      config:
        platform: linux
        inputs:
        #@ for published_cnb in published_cnbs_for_builder(builder):
          - name: #@ published_cnb.name + "-cnb"
        #@ end
        outputs:
          - name: published-sources
        run:
          path: bash
          args:
            - -cl
            - |
              if ls | grep '\-cnb'; then
                cp -r *-cnb published-sources/
              else
                true
              fi
    - task: create-builder-image
      image: ci-image
      file: buildpacks-ci/tasks/create-builder/task.yml
      privileged: true
      params: #@ get_params(builder)
    - task: get-platform-api-version
      file: core-deps-ci/tasks/get-platform-api-version/task.yml
    - task: write-tags-list
      file: core-deps-ci/tasks/write-tags-list/task.yml
      params:
        TAGS: #@ generate_tags(builder, version)
        STACK: #@ builder.name
        #@ if version == "latest":
        LATEST_PLATFORM_API: true
        #@ end
    - put: #@ builder.name + "-platform-api-" + version + "-rc-image"
      params:
        additional_tags: tags/tags
        image: builder-image/builder.tgz
    - put: version
      resource: #@ builder.version_key + "-version"
      params:
        file: version/version

- name: #@ "test-{}-builder-rc-platform-api-{}".format(builder.name, version)
  public: true
  plan:
    - in_parallel:
      - get: buildpacks-ci
      - get: ci-image
      - get: lifecycle
        resource: #@ "cnb-lifecycle-release-" + version
        passed: #@ [ "create-{}-builder-rc-platform-api-{}".format(builder.name, version) ]
      - get: version
        resource: #@ builder.version_key + "-version"
        passed: #@ [ "create-{}-builder-rc-platform-api-{}".format(builder.name, version) ]
      - get: builder-image
        resource: #@ builder.name + "-platform-api-" + version + "-rc-image"
        trigger: true
        passed: #@ [ "create-{}-builder-rc-platform-api-{}".format(builder.name, version) ]
        params:
          format: oci
      - get: pack
        resource: pack-release
      - get: cnb-builder
    - task: smoke-test-builder
      image: ci-image
      file: buildpacks-ci/tasks/test-builder/task.yml
      privileged: true
      params:
        STACK: #@ builder.name
        REPO: #@ builder.rcs_repository
        RUN_IMAGE: #@ get_params(builder).get("RUN_IMAGE")

- name: #@ "ship-{}-builder-platform-api-{}".format(builder.name, version)
  public: true
  plan:
    - in_parallel:
      - get: ci-image
      - get: core-deps-ci
      - get: buildpacks-ci
      - get: lifecycle
        resource: #@ "cnb-lifecycle-release-" + version
        passed: #@ [ "test-{}-builder-rc-platform-api-{}".format(builder.name, version) ]
      - get: #@ builder.name + "-platform-api-" + version + "-rc-image"
        passed: #@ [ "test-{}-builder-rc-platform-api-{}".format(builder.name, version) ]
        trigger: true
        params:
          format: oci
      - get: version
        resource: #@ builder.version_key + "-version"
        passed: #@ [ "test-{}-builder-rc-platform-api-{}".format(builder.name, version) ]
        params:
          bump: final
          pre: #@ builder.name
          pre_without_version: true
    - task: get-platform-api-version
      file: core-deps-ci/tasks/get-platform-api-version/task.yml
    - task: write-tags-list
      image: ci-image
      file: core-deps-ci/tasks/write-tags-list/task.yml
      params:
        TAGS: #@ generate_tags(builder, version)
        STACK: #@ builder.name
        #@ if version == "latest":
        LATEST_PLATFORM_API: true
        #@ end
    - in_parallel:
    #@ for repository in builder.repositories:
      - do:
        - put: #@ "{}-platform-api-{}-builder-image-{}".format(builder.name, version, repository)
          params:
            additional_tags: tags/tags
            image: #@ builder.name + "-platform-api-" + version + "-rc-image/image.tar"
    #@ end
    - put: version
      resource: #@ builder.version_key + "-version"
      params:
        bump: patch
  #@ end
#@ end

groups:
- name: all
  jobs:
  - pin-cnb-lifecycle-releases
#@ for version in data.values.supported_lifecycle_versions:
  #@ for builder in data.values.builders:
  - #@ "create-{}-builder-rc-platform-api-{}".format(builder.name, version)
  - #@ "test-{}-builder-rc-platform-api-{}".format(builder.name, version)
  - #@ "ship-{}-builder-platform-api-{}".format(builder.name, version)
  #@ end
#@ end

#@ for builder in data.values.builders:
- name: #@ builder.name + "-builder"
  jobs:
  #@ for version in data.values.supported_lifecycle_versions:
  - #@ "create-{}-builder-rc-platform-api-{}".format(builder.name, version)
  - #@ "test-{}-builder-rc-platform-api-{}".format(builder.name, version)
  - #@ "ship-{}-builder-platform-api-{}".format(builder.name, version)
  #@ end
#@ end

#@ for version in data.values.supported_lifecycle_versions:
- name: #@ "platform-api-" + version
  jobs:
  #@ for builder in data.values.builders:
  - #@ "create-{}-builder-rc-platform-api-{}".format(builder.name, version)
  - #@ "test-{}-builder-rc-platform-api-{}".format(builder.name, version)
  - #@ "ship-{}-builder-platform-api-{}".format(builder.name, version)
  #@ end
#@ end
