#@ load("@ytt:data", "data")
#@ load("@ytt:struct", "struct")
#@yaml/text-templated-strings

#@ def required_dependency_resource_name(required_dependency, stack):
#@   name = required_dependency.name + "-dependency-resource-" + stack
#@   if struct.decode(required_dependency).get("version_constraint"):
#@     name = name + "-" + required_dependency.version_constraint
#@   end
#@   return name
#@ end

---
resource_types:
- name: dependency-resource
  type: docker-image
  source:
    repository: cfbuildpacks/dependency-resource
- name: external-dependency-resource
  type: docker-image
  source:
    repository: cfbuildpacks/external-dependency-resource

resources:
- name: bre-ci
  type: git
  source:
    uri: git@github.com:pivotal/bre-ci.git
    branch: master
    private_key: ((bre-ci-deploy-key.private_key))
- name: buildpacks-ci
  type: git
  source:
    uri: https://github.com/cloudfoundry/buildpacks-ci.git
    branch: master
- name: binary-builder
  type: git
  source:
    uri: https://github.com/cloudfoundry/binary-builder.git
    branch: master

#@ for dependency in data.values.dependencies:
- name: #@ dependency.name + "-source"
  type: external-dependency-resource
  source:
    type: #@ dependency.source_type
    github_access_token: ((buildpacks-github-token))

  #@ for stack in dependency.stacks:
- name: #@ dependency.name + "-dependency-resource-" + stack
  type: dependency-resource
  source:
    bucket: pivotal-buildpacks
    access_key_id: ((pivotal-buildpacks-s3-access-key))
    secret_access_key: ((pivotal-buildpacks-s3-secret-key))
    region_name: "us-east-1"
    s3_prefix: deps
    dependency_name: #@ dependency.name
    stack: #@ stack
  #@ end
#@ end

#@ for dependency in data.values.dependencies:
  #@ for required_dependency in struct.encode(struct.decode(dependency).get('requires', [])):
    #@ if struct.decode(required_dependency).get("version_constraint"):
      #@ for stack in dependency.stacks:
- name: #@ required_dependency_resource_name(required_dependency, stack)
  type: dependency-resource
  source:
    bucket: pivotal-buildpacks
    access_key_id: ((pivotal-buildpacks-s3-access-key))
    secret_access_key: ((pivotal-buildpacks-s3-secret-key))
    region_name: "us-east-1"
    s3_prefix: deps
    dependency_name: #@ required_dependency.name
    version_constraint: #@ required_dependency.version_constraint
    stack: #@ stack
      #@ end
    #@ end
  #@ end
#@ end

#@ for stack in data.values.build_stacks:
- name: #@ stack.name + "-image"
  type: docker-image
  source:
    repository: #@ stack.image
    tag: #@ stack.image_tag
#@ end

jobs:
#@ for dependency in data.values.dependencies:
- name: #@ "build-" + dependency.name
  plan:
  - in_parallel:
    - get: bre-ci
    - get: buildpacks-ci
    - get: binary-builder
  #@ for required_dependency in struct.encode(struct.decode(dependency).get('requires', [])):
    #@ for stack in dependency.stacks:
    - get: #@ required_dependency_resource_name(required_dependency, stack)
    #@ end
  #@ end
    - get: source
      resource: #@ dependency.name + "-source"
      trigger: true
  #@ for stack in dependency.stacks:
    - get: #@ stack + "-image"
  #@ end
  - in_parallel:
  #@ for stack in dependency.stacks:
    - do:
    #@ if stack == "bionic":
      - task: #@ "build-dependency-" + stack
        image: #@ stack + "-image"
        file: bre-ci/tasks/build-dependency/task.yml
        output_mapping:
          built-dependency: #@ stack + "-dependency"
          metadata: #@ stack + "-metadata"
        params:
          STACK: #@ stack
    #@ else:
      - task: #@ "build-binary-" + stack
        image: #@ stack + "-image"
        file: buildpacks-ci/tasks/build-binary-new/build.yml
        output_mapping:
          artifacts: #@ stack + "-dependency"
          dep-metadata: #@ stack + "-metadata"
        params:
          STACK: #@ stack
          SKIP_COMMIT: true
    #@ end
    #@ if not struct.decode(dependency).get('skip_test', False):
      - task: #@ "run-tests-" + stack
        image: #@ stack + "-image"
        file: bre-ci/tasks/test-dependency/task.yml
        input_mapping:
          dependency: #@ stack + "-dependency"
      #@ for index in range(len(struct.decode(dependency).get('requires', []))):
          required_dependency_(@= str(index+1) @): #@ required_dependency_resource_name(dependency.requires[index], stack)
      #@ end
    #@ end
  #@ end
  - in_parallel:
  #@ for stack in dependency.stacks:
    - put: #@ dependency.name + "-dependency-resource-" + stack
      params:
        dependency_file: #@ stack + "-dependency/*"
        metadata_file: #@ stack + "-metadata/*.json"
  #@ end
#@ end
