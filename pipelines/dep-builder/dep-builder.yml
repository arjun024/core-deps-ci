#@ load("@ytt:data", "data")
#@ load("@ytt:struct", "struct")
#@yaml/text-templated-strings

#@ def required_dependency_name(required_dependency):
#@   name = required_dependency.name.lower() + "-dependency"
#@   if struct.decode(required_dependency).get("version_constraint"):
#@     name = name + "-" + required_dependency.version_constraint
#@   end
#@   return name
#@ end

#@ def get_bionic_mixins(dependency):
#@   mixin_list = ""
#@   for stack in dependency.stacks:
#@     if stack.id == "io.buildpacks.stacks.bionic":
#@       for mixin in struct.encode(struct.decode(stack).get('mixins', [])):
#@         mixin_list = mixin_list + mixin + ","
#@       end
#@     end
#@   end
#@   length = len(mixin_list)
#@   return mixin_list[0:length - 1]
#@ end

---
resource_types:
- name: external-dependency-resource
  type: docker-image
  source:
    repository: coredeps/external-dependency-resource

resources:
- name: core-deps-ci
  type: git
  source:
    uri: git@github.com:cloudfoundry/core-deps-ci.git
    private_key: ((core-deps-ci-deploy-key.private_key))
- name: buildpacks-ci
  type: git
  source:
    uri: https://github.com/cloudfoundry/buildpacks-ci.git
    branch: master
- name: binary-builder
  type: git
  source:
    uri: https://github.com/cloudfoundry/binary-builder.git

#@ for dependency in data.values.dependencies:
- name: #@ dependency.name.lower() + "-source"
  type: external-dependency-resource
  source:
    type: #@ dependency.name
    github_access_token: ((buildpacks-github-token))

- name: #@ dependency.name.lower() + "-dependency"
  type: s3
  source:
    bucket: pivotal-buildpacks
    access_key_id: ((pivotal-buildpacks-s3-access-key))
    secret_access_key: ((pivotal-buildpacks-s3-secret-key))
    region_name: "us-east-1"
    regexp: #@ "deps/" + dependency.name + "/(.*)"

- name: #@ dependency.name.lower() + "-metadata"
  type: s3
  source:
    bucket: pivotal-buildpacks
    access_key_id: ((pivotal-buildpacks-s3-access-key))
    secret_access_key: ((pivotal-buildpacks-s3-secret-key))
    region_name: "us-east-1"
    versioned_file: #@ "metadata/" + dependency.name.lower() + ".json"
#@ end

jobs:
#@ for dependency in data.values.dependencies:
- name: #@ "build-" + dependency.name.lower()
  plan:
  - in_parallel:
    - get: buildpacks-ci
    - get: binary-builder
    - get: source
      resource: #@ dependency.name.lower() + "-source"
      version: every
      trigger: true
  - task: build-binary
    file: buildpacks-ci/tasks/build-binary-new/build.yml
    output_mapping:
      artifacts: dependency
    params:
      STACK: bionic
      SKIP_COMMIT: true
  - put: #@ dependency.name.lower() + "-dependency"
    params:
      file: dependency/*

  #@ if not struct.decode(dependency).get('skip_test', False):
- name: #@ "test-" + dependency.name.lower()
  plan:
    - in_parallel:
      - get: dependency
        resource: #@ dependency.name.lower() + "-dependency"
        passed: #@ [ "build-" + dependency.name.lower() ]
        trigger: true
      - get: core-deps-ci
      #@ for required_dependency in struct.encode(struct.decode(dependency).get('requires', [])):
      - get: #@ required_dependency_name(required_dependency)
      #@ end
      - get: source
        resource: #@ dependency.name.lower() + "-source"
        passed: #@ [ "build-" + dependency.name.lower() ]
    - task: run-tests
      file: core-deps-ci/tasks/dep-builder/test-dependency/task.yml
      input_mapping:
        #@ for index in range(len(struct.decode(dependency).get('requires', []))):
        required_dependency_(@= str(index+1) @): #@ required_dependency_name(dependency.requires[index])
        #@ end
      params:
        MIXINS: #@ get_bionic_mixins(dependency)
  #@ end

- name: #@ "upload-metadata-" + dependency.name.lower()
  serial: true
  plan:
    - in_parallel:
      - get: dependency
        resource: #@ dependency.name.lower() + "-dependency"
        #@ if not struct.decode(dependency).get('skip_test', False):
        passed: #@ [ "test-" + dependency.name.lower() ]
        #@ else:
        passed: #@ [ "build-" + dependency.name.lower() ]
        #@ end
        trigger: true
      - get: source
        resource: #@ dependency.name.lower() + "-source"
        #@ if not struct.decode(dependency).get('skip_test', False):
        passed: #@ [ "test-" + dependency.name.lower() ]
        #@ else:
        passed: #@ [ "build-" + dependency.name.lower() ]
        #@ end
      - get: core-deps-ci
      - get: metadata
        resource: #@ dependency.name.lower() + "-metadata"
    - task: write-dependency-metadata
      file: core-deps-ci/tasks/dep-builder/write-dependency-metadata/task.yml
    - put: #@ dependency.name.lower() + "-metadata"
      params:
        file: metadata/*.json
#@ end

groups:
- name: all
  jobs:
    #@ for dependency in data.values.dependencies:
     - #@ "build-" + dependency.name.lower()
      #@ if not struct.decode(dependency).get('skip_test', False):
     - #@ "test-" + dependency.name.lower()
      #@ end
     - #@ "upload-metadata-" + dependency.name.lower()
    #@ end

#@ for dependency in data.values.dependencies:
- name: #@ dependency.name.lower()
  jobs:
    - #@ "build-" + dependency.name.lower()
  #@ if not struct.decode(dependency).get('skip_test', False):
    - #@ "test-" + dependency.name.lower()
  #@ end
    - #@ "upload-metadata-" + dependency.name.lower()
#@ end
