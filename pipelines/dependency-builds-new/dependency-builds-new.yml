#@ load("@ytt:data", "data")
#@ load("@ytt:struct", "struct")
#@yaml/text-templated-strings

#@ def dep_source_resource_name(name, version_line):
#@   return "{}_source_{}".format(name, version_line)
#@ end

#@ def dep_source_params(dependency, version_line):
#@   source_params = {"name": dependency.name, "type": dependency.source_type}
#@   if hasattr(dependency, "source_params"):
#@     source_params.update(dependency.source_params)
#@   end
#@   if version_line != "latest":
#@     source_params.update({"version_filter": version_line})
#@   end
#@   return source_params
#@ end

---
resource_types:
- name: depwatcher
  type: docker-image
  source:
    repository: cfbuildpacks/depwatcher

resources:
- name: buildpacks-ci
  type: git
  source:
    uri: https://github.com/cloudfoundry/buildpacks-ci.git
    branch: master
- name: binary-builder
  type: git
  source:
    uri: https://github.com/cloudfoundry/binary-builder.git
- name: builds
  type: git
  source:
    uri: https://github.com/cloudfoundry/public-buildpacks-ci-robots.git
    branch: master
    paths: [ binary-builds-new/ ]

#@ for dependency in data.values.dependencies:
  #@ for version_line in dependency.version_lines:
- name: #@ dep_source_resource_name(dependency.name, version_line)
  type: depwatcher
  source: #@ dep_source_params(dependency, version_line)
  #@ end
#@ end

#@ for stack in data.values.build_stacks:
- name: #@ stack + "-image"
  type: docker-image
  source:
    repository: #@ "cloudfoundry/" + stack
#@ end

jobs:
#@ for dependency in data.values.dependencies:
  #@ for version_line in dependency.version_lines:
- name: #@ "build-{}-{}".format(dependency.name, version_line)
  serial: true
  plan:
  - in_parallel:
    - get: buildpacks-ci
    - get: binary-builder
    - get: builds
    - get: source
      resource: #@ dep_source_resource_name(dependency.name, version_line)
      trigger: true
    #@ for stack in dependency.stacks:
    - get: #@ stack + "-image"
    #@ end
  - in_parallel:
    #@ for stack in dependency.stacks:
    - do:
      - task: #@ "build-binary-" + stack
        image: #@ stack + "-image"
        file: buildpacks-ci/tasks/build-binary-new/build.yml
        output_mapping:
          artifacts: #@ stack + "-artifacts"
          builds-artifacts: #@ stack + "-builds-metadata"
        params:
          STACK: #@ stack
    #@ end
  #@ end
#@ end
