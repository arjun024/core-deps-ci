#@ load("@ytt:data", "data")
#@yaml/text-templated-strings

#@ def get_base_image(stack, image):
#@   base_image = stack.name
#@   if stack.name == "tiny":
#@     if image == "build":
#@       base_image = "base"
#@     end
#@   end
#@
#@   return base_image
#@ end

#@ def has_base_image(stack, image):
#@   if stack.name == "tiny":
#@     if image == "build":
#@       return False
#@     end
#@   end
#@
#@   return True
#@ end

---
resources:
#! Github Repos
- name: buildpacks-ci
  type: git
  source:
    uri: https://github.com/cloudfoundry/buildpacks-ci
    branch: master

- name: bre-ci
  type: git
  source:
    uri: git@github.com:pivotal/bre-ci.git
    private_key: ((bre-ci-deploy-key.private_key))

- name: cflinuxfs3-image
  type: docker-image
  source:
    repository: cloudfoundry/cflinuxfs3
    username: ((buildpacks-docker-user.username))
    password: ((buildpacks-docker-user.password))
    email: cf-buildpacks-eng@pivotal.io

- name: bionic-image
  type: docker-image
  source:
    repository: ubuntu
    tag: bionic

#! CNB stack images
#@ for stack in data.values.stacks:
  #@ for image in stack.base_images:
- name: #@ "{}-{}-base-image-rc".format(stack.name, image)
  type: registry-image
  source:
    repository: #@ "gcr.io/cf-buildpacks-releng/{}-rc".format(image)
    #@ if stack.name != "full-cf":
    tag: #@ stack.name
    #@ else:
    tag: full-cf
    #@ end
    username: _json_key
    password: ((releng-gcp-service-account-key))

- name: #@ "{}-{}-base-image".format(stack.name, image)
  type: registry-image
  source:
    repository: #@ "gcr.io/paketo-buildpacks/" + image
    tag: #@ stack.name
    username: _json_key
    password: ((paketo-gcr-service-account-key))

- name: #@ "{}-{}-cloudfoundry-base-image".format(stack.name, image)
  type: registry-image
  source:
    repository: #@ "cloudfoundry/" + image
    #@ if stack.name != "full-cf":
    tag: #@ stack.name
    #@ else:
    tag: full
    #@ end
    username: ((buildpacks-docker-user.username))
    password: ((buildpacks-docker-user.password))

- name: #@ "{}-{}-cnb-image-rc".format(stack.name, image)
  type: registry-image
  source:
    repository: #@ "gcr.io/cf-buildpacks-releng/{}-rc".format(image)
    #@ if stack.name != "full-cf":
    tag: #@ stack.name + "-cnb"
    #@ else:
    tag: full-cnb-cf
    #@ end
    username: _json_key
    password: ((releng-gcp-service-account-key))

- name: #@ "{}-{}-cnb-image".format(stack.name, image)
  type: registry-image
  source:
    repository: #@ "gcr.io/paketo-buildpacks/" + image
    #@ if stack.name != "full-cf":
    tag: #@ stack.name + "-cnb"
    #@ else:
    tag: full-cnb-cf
    #@ end
    username: _json_key
    password: ((paketo-gcr-service-account-key))

- name: #@ "{}-{}-dockerhub-cnb-image".format(stack.name, image)
  type: registry-image
  source:
    repository: #@ "paketobuildpacks/" + image
    #@ if stack.name != "full-cf":
    tag: #@ stack.name + "-cnb"
    #@ else:
    tag: full-cnb-cf
    #@ end
    username: ((paketo-docker-user.username))
    password: ((paketo-docker-user.password))

- name: #@ "{}-{}-cloudfoundry-cnb-image".format(stack.name, image)
  type: registry-image
  source:
    repository: #@ "cloudfoundry/" + image
    #@ if stack.name != "full-cf":
    tag: #@ stack.name + "-cnb"
    #@ else:
    tag: full-cnb
    #@ end
    username: ((buildpacks-docker-user.username))
    password: ((buildpacks-docker-user.password))

#! Dockerfiles
- name: #@ "{}-{}-cnb-dockerfile".format(stack.name, image)
  type: git
  source:
    uri: https://github.com/paketo-buildpacks/stacks
    #@ if stack.name != "full-cf":
    paths: #@ [ "{}/cnb/{}/**".format(stack.name, image) ]
    #@ else:
    paths: #@ [ "full/cnb/{}/**".format(image) ]
    #@ end

    #@ if stack.build_base:
- name: #@ "{}-{}-base-dockerfile".format(stack.name, image)
  type: git
  source:
    uri: https://github.com/paketo-buildpacks/stacks
    paths: #@ [ "{}/dockerfile/{}/**".format(stack.name, image) ]
    #@ end
  #@ end

#! Versions
- name: #@ "{}-version".format(stack.name)
  type: semver
  source:
    initial_version: 0.0.1
    bucket: stack-versions
    key: #@ stack.name
    access_key_id: ((pivotal-offline-buildpacks-s3-access-key))
    secret_access_key: ((pivotal-offline-buildpacks-s3-secret-key))

#! Mixins
  #@ if stack.mixins:
- name: #@ stack.name + "-build-mixins"
  type: s3
  source:
    bucket: stack-mixins
    versioned_file: #@ stack.name + "-build-mixins.json"
    access_key_id: ((pivotal-offline-buildpacks-s3-access-key))
    secret_access_key: ((pivotal-offline-buildpacks-s3-secret-key))

- name: #@ stack.name + "-run-mixins"
  type: s3
  source:
    bucket: stack-mixins
    versioned_file: #@ stack.name + "-run-mixins.json"
    access_key_id: ((pivotal-offline-buildpacks-s3-access-key))
    secret_access_key: ((pivotal-offline-buildpacks-s3-secret-key))
  #@ end

#! Tags
- name: #@ stack.name + "-base-image-tags"
  type: s3
  source:
    bucket: stack-tags
    versioned_file: #@ stack.name + "-base-image-tags"
    access_key_id: ((pivotal-offline-buildpacks-s3-access-key))
    secret_access_key: ((pivotal-offline-buildpacks-s3-secret-key))

- name: #@ stack.name + "-cnb-image-tags"
  type: s3
  source:
    bucket: stack-tags
    versioned_file: #@ stack.name + "-cnb-image-tags"
    access_key_id: ((pivotal-offline-buildpacks-s3-access-key))
    secret_access_key: ((pivotal-offline-buildpacks-s3-secret-key))

  #@ if stack.name == "full-cf":
- name: #@ stack.name + "-base-image-tags-cf"
  type: s3
  source:
    bucket: stack-tags
    versioned_file: #@ stack.name + "-base-image-tags-cf"
    access_key_id: ((pivotal-offline-buildpacks-s3-access-key))
    secret_access_key: ((pivotal-offline-buildpacks-s3-secret-key))

- name: #@ stack.name + "-cnb-image-tags-cf"
  type: s3
  source:
    bucket: stack-tags
    versioned_file: #@ stack.name + "-cnb-image-tags-cf"
    access_key_id: ((pivotal-offline-buildpacks-s3-access-key))
    secret_access_key: ((pivotal-offline-buildpacks-s3-secret-key))
  #@ end
#@ end

#! Tiny's build image is a re-tagged version of the bionic image (and not built from a dockerfile)
#! so it is a special case
- name: tiny-build-cnb-image-rc
  type: registry-image
  source:
    repository: gcr.io/cf-buildpacks-releng/build-rc
    tag: tiny-cnb
    username: _json_key
    password: ((releng-gcp-service-account-key))

- name: tiny-build-cnb-image
  type: registry-image
  source:
    repository: gcr.io/paketo-buildpacks/build
    tag: tiny-cnb
    username: _json_key
    password: ((paketo-gcr-service-account-key))

- name: tiny-build-dockerhub-cnb-image
  type: registry-image
  source:
    repository: paketobuildpacks/build
    tag: tiny-cnb
    username: ((paketo-docker-user.username))
    password: ((paketo-docker-user.password))

- name: tiny-build-cloudfoundry-cnb-image
  type: registry-image
  source:
    repository: cloudfoundry/build
    tag: tiny-cnb
    username: ((buildpacks-docker-user.username))
    password: ((buildpacks-docker-user.password))

jobs:
- name: test-tiny
  plan:
    - get: tiny-run-base-dockerfile
      trigger: true
    - get: buildpacks-ci
    - task: integration-test
      privileged: true
      file: buildpacks-ci/tasks/test-tiny-docker-image/task.yml

#@ for stack in data.values.stacks:
- name: #@ "create-{}-base-image-rcs".format(stack.name)
  public: true
  plan:
    - in_parallel:
      - get: bre-ci
    #@ for image in stack.base_images:
      #@ if stack.name != "full-cf":
      - get: #@ "{}-{}-base-dockerfile".format(stack.name, image)
        trigger: true
        #@ if stack.name == "tiny":
        passed: [test-tiny]
        #@ end
      #@ end
      - get: #@ "{}-{}-cnb-dockerfile".format(stack.name, image)
        trigger: true
    #@ end
    #@ if stack.name == "full-cf":
      - get: #@ stack.name + "-image"
        resource: cflinuxfs3-image
        trigger: true
        params:
          save: true
    #@ else:
      - get: bionic-image
        trigger: true
    #@ end
    #@ if stack.name == "tiny":
      - get: base-build-base-image-rc
        trigger: true
    #@ end
      - get: version
        resource: #@ stack.name + "-version"
        params:
          bump: patch
          pre: #@ stack.name
          pre_without_version: true
    #@ if stack.name != "full-cf":
    - in_parallel:
      #@ for image in stack.base_images:
      - do:
        - task: #@ "build-{}-{}-base-image".format(stack.name, image)
          privileged: true
          file: bre-ci/tasks/build-stack-image/task.yml
          input_mapping:
            stacks: #@ "{}-{}-base-dockerfile".format(stack.name, image)
          params:
            CONTEXT: #@ "stacks/{}/dockerfile/{}".format(stack.name, image)
        - put: #@ "{}-{}-base-image-rc".format(stack.name, image)
          params:
            additional_tags: version/version
            image: image/image.tar
      #@ end
    #@ else:
    - task: write-tags-list
      file: bre-ci/tasks/write-tags-list/task.yml
      params:
        REMOVE_CF_SUFFIX: true
    - in_parallel:
      #@ for image in stack.base_images:
      - put: #@ "{}-{}-base-image-rc".format(stack.name, image)
        params:
          additional_tags: version/version
          image: #@ stack.name + "-image/image"
      #@ end
      - put: #@ stack.name + "-base-image-tags-cf"
        params:
          file: tags/tags-cf
    #@ end
    - in_parallel:
      - put: #@ stack.name + "-base-image-tags"
        params:
          file: version/version
      - put: version
        resource: #@ "{}-version".format(stack.name)
        params:
          bump: patch

  #@ if stack.mixins:
- name: #@ "generate-mixins-labels-{}-cnb-image".format(stack.name)
  public: true
  plan:
    - in_parallel:
      - get: bre-ci
      #@ for image in stack.base_images:
      - get: #@ "{}-{}-cnb-dockerfile".format(stack.name, image)
        trigger: true
        passed: #@ [ "create-{}-base-image-rcs".format(stack.name) ]
      - get: #@ "{}-{}-base-image-rc".format(stack.name, image)
        trigger: true
        passed: #@ [ "create-{}-base-image-rcs".format(stack.name) ]
      #@ end
      - get: version
        resource: #@ stack.name + "-version"
        passed: #@ [ "create-{}-base-image-rcs".format(stack.name) ]
        params:
          pre: #@ stack.name
          pre_without_version: true
      - get: base-image-tags
        resource: #@ stack.name + "-base-image-tags"
        passed: #@ [ "create-{}-base-image-rcs".format(stack.name) ]
      #@ if stack.name == "full-cf":
      - get: base-image-tags-cf
        resource: #@ stack.name + "-base-image-tags-cf"
        passed: #@ [ "create-{}-base-image-rcs".format(stack.name) ]
      #@ end
    - in_parallel:
      - task: write-build-package-list
        file: bre-ci/tasks/write-package-list/task.yml
        image: #@ "{}-build-base-image-rc".format(stack.name)
        output_mapping:
          package-list: build-image-package-list
      - task: write-run-package-list
        file: bre-ci/tasks/write-package-list/task.yml
        image: #@ "{}-run-base-image-rc".format(stack.name)
        output_mapping:
          package-list: run-image-package-list
    - task: write-mixins-labels
      file: bre-ci/tasks/write-mixins-labels/task.yml
      input_mapping:
        build-base-dockerfile: #@ "{}-build-cnb-dockerfile".format(stack.name)
        run-base-dockerfile: #@ "{}-run-cnb-dockerfile".format(stack.name)
      params:
        STACK: #@ stack.name
    - in_parallel:
      - put: #@ stack.name + "-build-mixins"
        params:
          file: build-mixins-label/mixins.json
      - put: #@ stack.name + "-run-mixins"
        params:
          file: run-mixins-label/mixins.json
  #@ end

- name: #@ "create-{}-cnb-image-rcs".format(stack.name)
  public: true
  plan:
    - in_parallel:
      - get: bre-ci
    #@ for image in data.values.images:
      #@ base_image = get_base_image(stack, image)
      - get: #@ "{}-{}-cnb-dockerfile".format(base_image, image)
        #@ if has_base_image(stack, image):
        trigger: true
        #@ end
      #@ if stack.mixins:
        passed: #@ [ "generate-mixins-labels-{}-cnb-image".format(base_image) ]
      #@ elif has_base_image(stack, image):
        passed: #@ [ "create-{}-base-image-rcs".format(base_image) ]
      #@ end
      - get: #@ "{}-{}-base-image-rc".format(base_image, image)
        #@ if has_base_image(stack, image):
        trigger: true
        #@ end
        passed:
      #@ if stack.mixins:
        - #@ "generate-mixins-labels-{}-cnb-image".format(base_image)
      #@ else:
        - #@ "create-{}-base-image-rcs".format(stack.name, image)
      #@ end
      #@ if stack.mixins:
      - get: #@ "{}-{}-mixins".format(stack.name, image)
        passed: #@ [ "generate-mixins-labels-{}-cnb-image".format(base_image) ]
      #@ end
    #@ end
      - get: version
        resource: #@ stack.name + "-version"
        #@ if stack.mixins:
        passed: #@ [ "generate-mixins-labels-{}-cnb-image".format(stack.name) ]
        #@ else:
        passed: #@ [ "create-{}-base-image-rcs".format(stack.name) ]
        #@ end
        params:
        #@ if stack.name != "full-cf":
          pre: #@ stack.name + "-cnb"
        #@ else:
          pre: full-cnb-cf
        #@ end
          pre_without_version: true
      - get: base-image-tags
        resource: #@ stack.name + "-base-image-tags"
        #@ if stack.mixins:
        passed: #@ [ "generate-mixins-labels-{}-cnb-image".format(stack.name) ]
        #@ else:
        passed: #@ [ "create-{}-base-image-rcs".format(stack.name) ]
        #@ end
        #@ if stack.name == "full-cf":
      - get: base-image-tags-cf
        resource: #@ stack.name + "-base-image-tags-cf"
        passed: #@ [ "create-{}-base-image-rcs".format(stack.name) ]
        #@ end
    - task: write-tags-list
      file: bre-ci/tasks/write-tags-list/task.yml
      params:
        #@ if stack.latest:
        TAGS: latest
        #@ end
        #@ if stack.name == "full-cf":
        REMOVE_CF_SUFFIX: true
        #@ end
    - in_parallel:
    #@ for image in data.values.images:
      #@ base_image = get_base_image(stack, image)
      - do:
        - task: write-build-args-file
          file: bre-ci/tasks/write-build-args-file/task.yml
          params:
            BASE_IMAGE: #@ "gcr.io/cf-buildpacks-releng/{}-rc:{}".format(image, base_image)
            #@ if stack.name == "tiny":
            STACK_ID: #@ stack.id
            #@ end
          #@ if stack.mixins:
          input_mapping:
            mixins-label: #@ "{}-{}-mixins".format(stack.name, image)
          #@ end
          output_mapping:
            build-args: #@ image + "-build-args"
        - task: write-docker-creds
          file: bre-ci/tasks/write-docker-creds/task.yml
          params:
            USERNAME: _json_key
            PASSWORD: ((releng-gcp-service-account-key))
        - task: #@ "build-{}-{}-cnb-image-rc".format(stack.name, image)
          privileged: true
          file: bre-ci/tasks/build-stack-image/task.yml
          input_mapping:
            stacks: #@ "{}-{}-cnb-dockerfile".format(base_image, image)
            build-args: #@ image + "-build-args"
          output_mapping:
            image: #@ image + "-image"
          params:
            #@ if stack.name != "full-cf":
            CONTEXT: #@ "stacks/{}/cnb/{}".format(base_image, image)
            #@ else:
            CONTEXT: #@ "stacks/full/cnb/{}".format(image)
            #@ end
            BUILD_ARGS_FILE: build-args/args
        - put: #@ "{}-{}-cnb-image-rc".format(stack.name, image)
          params:
            additional_tags: tags/tags
            image: #@ image + "-image/image.tar"
    #@ end
    - in_parallel:
      - put: #@ stack.name + "-cnb-image-tags"
        params:
          file: tags/tags
      #@ if stack.name == "full-cf":
      - put: #@ stack.name + "-cnb-image-tags-cf"
        params:
          file: tags/tags-cf
      #@ end

- name: #@ "test-{}-cnb-image-rcs".format(stack.name)
  public: true
  plan:
    - in_parallel:
      - get: bre-ci
      - get: version
        resource: #@ stack.name + "-version"
        passed: #@ [ "create-{}-cnb-image-rcs".format(stack.name) ]
        params:
          pre: #@ stack.name
          pre_without_version: true
      #@ for image in data.values.images:
      - get: #@ "{}-{}-cnb-image-rc".format(stack.name, image)
        trigger: true
        passed: #@ [ "create-{}-cnb-image-rcs".format(stack.name) ]
        #@ base_image = get_base_image(stack, image)
      - get: #@ "{}-{}-base-image-rc".format(base_image, image)
        trigger: true
        passed: #@ [ "create-{}-cnb-image-rcs".format(stack.name) ]
      #@ end
      - get: base-image-tags
        resource: #@ stack.name + "-base-image-tags"
        passed: #@ [ "create-{}-cnb-image-rcs".format(stack.name) ]
      - get: cnb-image-tags
        resource: #@ stack.name + "-cnb-image-tags"
        passed: #@ [ "create-{}-cnb-image-rcs".format(stack.name) ]
      #@ if stack.name == "full-cf":
      - get: base-image-tags-cf
        resource: #@ stack.name + "-base-image-tags-cf"
        passed: #@ [ "create-{}-cnb-image-rcs".format(stack.name) ]
      - get: cnb-image-tags-cf
        resource: #@ stack.name + "-cnb-image-tags-cf"
        passed: #@ [ "create-{}-cnb-image-rcs".format(stack.name) ]
      #@ end
    - task: #@ "test-{}-cnb-image-rcs".format(stack.name)
      privileged: true
      file: bre-ci/tasks/test-stack/task.yml
      params:
        STACK_ID: #@ stack.id
        GCP_SERVICE_ACCOUNT_KEY: ((releng-gcp-service-account-key))
        #@ if stack.name != "full-cf":
        BUILD_IMAGE: #@ "gcr.io/cf-buildpacks-releng/build-rc:{}-cnb".format(stack.name)
        RUN_IMAGE: #@ "gcr.io/cf-buildpacks-releng/run-rc:{}-cnb".format(stack.name)
        #@ else:
        BUILD_IMAGE: gcr.io/cf-buildpacks-releng/build-rc:full-cnb-cf
        RUN_IMAGE: gcr.io/cf-buildpacks-releng/run-rc:full-cnb-cf
        #@ end

- name: #@ "upload-{}-images".format(stack.name)
  public: true
  plan:
    - in_parallel:
      - get: bre-ci
      - get: version
        resource: #@ stack.name + "-version"
        passed: #@ [ "test-{}-cnb-image-rcs".format(stack.name) ]
        params:
          pre: #@ stack.name
          pre_without_version: true
      #@ for image in data.values.images:
        #@ if has_base_image(stack, image):
      - get: #@ image + "-base-image"
        resource: #@ "{}-{}-base-image-rc".format(stack.name, image)
        trigger: true
        passed: #@ [ "test-{}-cnb-image-rcs".format(stack.name) ]
        params:
          format: oci
        #@ end
      - get: #@ image + "-cnb-image"
        resource: #@ "{}-{}-cnb-image-rc".format(stack.name, image)
        trigger: true
        passed: #@ [ "test-{}-cnb-image-rcs".format(stack.name) ]
        params:
          format: oci
      #@ end
      - get: base-image-tags
        resource: #@ stack.name + "-base-image-tags"
        passed: #@ [ "test-{}-cnb-image-rcs".format(stack.name) ]
      - get: cnb-image-tags
        resource: #@ stack.name + "-cnb-image-tags"
        passed: #@ [ "test-{}-cnb-image-rcs".format(stack.name) ]
      #@ if stack.name == "full-cf":
      - get: base-image-tags-cf
        resource: #@ stack.name + "-base-image-tags-cf"
        passed: #@ [ "test-{}-cnb-image-rcs".format(stack.name) ]
      - get: cnb-image-tags-cf
        resource: #@ stack.name + "-cnb-image-tags-cf"
        passed: #@ [ "test-{}-cnb-image-rcs".format(stack.name) ]
      #@ end
    - task: check-if-stack-version-exists
      file: bre-ci/tasks/check-if-stack-version-exists/task.yml
    - in_parallel:
      #@ for image in stack.base_images:
      - put: #@ "{}-{}-base-image".format(stack.name, image)
        params:
          additional_tags: #@ "base-image-tags/{}-base-image-tags".format(stack.name)
          image: #@ image + "-base-image/image.tar"
      - put: #@ "{}-{}-cloudfoundry-base-image".format(stack.name, image)
        params:
          #@ if stack.name != "full-cf":
          additional_tags: #@ "base-image-tags/{}-base-image-tags".format(stack.name)
          #@ else:
          additional_tags: #@ "base-image-tags-cf/{}-base-image-tags-cf".format(stack.name)
          #@ end
          image: #@ image + "-base-image/image.tar"
      #@ end
      #@ for image in data.values.images:
      - put: #@ "{}-{}-cnb-image".format(stack.name, image)
        params:
          additional_tags: #@ "cnb-image-tags/{}-cnb-image-tags".format(stack.name)
          image: #@ image + "-cnb-image/image.tar"
      - put: #@ "{}-{}-dockerhub-cnb-image".format(stack.name, image)
        params:
          additional_tags: #@ "cnb-image-tags/{}-cnb-image-tags".format(stack.name)
          image: #@ image + "-cnb-image/image.tar"
      - put: #@ "{}-{}-cloudfoundry-cnb-image".format(stack.name, image)
        params:
          #@ if stack.name != "full-cf":
          additional_tags: #@ "cnb-image-tags/{}-cnb-image-tags".format(stack.name)
          #@ else:
          additional_tags: #@ "cnb-image-tags-cf/{}-cnb-image-tags-cf".format(stack.name)
          #@ end
          image: #@ image + "-cnb-image/image.tar"
      #@ end
#@ end

groups:
- name: all
  jobs:
    - test-tiny
#@ for stack in data.values.stacks:
  #@ if stack.mixins:
    - #@ "generate-mixins-labels-{}-cnb-image".format(stack.name)
  #@ end
    - #@ "create-{}-base-image-rcs".format(stack.name)
    - #@ "create-{}-cnb-image-rcs".format(stack.name)
    - #@ "test-{}-cnb-image-rcs".format(stack.name)
    - #@ "upload-{}-images".format(stack.name)
#@ end

#@ for stack in data.values.stacks:
- name: #@ stack.name
  jobs:
  #@ if stack.mixins:
    - #@ "generate-mixins-labels-{}-cnb-image".format(stack.name)
  #@ end
  #@ if stack.name == "tiny":
    - test-tiny
  #@ end
    - #@ "create-{}-base-image-rcs".format(stack.name)
    - #@ "create-{}-cnb-image-rcs".format(stack.name)
    - #@ "test-{}-cnb-image-rcs".format(stack.name)
    - #@ "upload-{}-images".format(stack.name)
#@ end
